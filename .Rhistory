}
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(!grepl("rock", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss <- Rock_Song_hotness_mean
}
}
}
#if a row wass zero in song hotness remove it (meaningless) note: it does not consider NAs as well
music_cleaned <- subset(music_cleaned,song.hotttnesss!=0)
#making sure there is no NA left in  the dataset
music_cleaned <- music_cleaned[complete.cases(music_cleaned),]
View(music_cleaned)
music <- read.csv("music.csv", header=T)
music_cleaned <- music[,c(1, 7, 9, 10, 11, 18, 24,26, 28, 29, 30, 32)]
#1.1 datasets if the terms col has pop, rock, jazz,classic, country
contains_rock <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "rock"))
contains_Jazz <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "jazz"))
contains_Pop <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "pop"))
contains_Classic <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "classic"))
contains_Country <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "country"))
Rock_Song_hotness_mean <- mean(contains_rock$song.hotttnesss, na.rm = TRUE)
Jazz_Song_hotness_mean <- mean(contains_Jazz$song.hotttnesss, na.rm = TRUE)
Pop_Song_hotness_mean <- mean(contains_Pop$song.hotttnesss, na.rm = TRUE)
Classic_Song_hotness_mean <- mean(contains_Classic$song.hotttnesss, na.rm = TRUE)
Country_Song_hotness_mean <- mean(contains_Country$song.hotttnesss, na.rm = TRUE)
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(!grepl("rock", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss <- Rock_Song_hotness_mean
}
}
}
max(music_cleaned$song.hotttnesss)
min(music_cleaned$song.hotttnesss)
!grepl("rock", music_cleaned$terms[1])
!grepl("rock", music_cleaned$terms[2])
grepl("rock", music_cleaned$terms[2])
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(grepl("rock", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss <- Rock_Song_hotness_mean
}
}
}
min(music_cleaned$song.hotttnesss)
is.na(music_cleaned$song.hotttnesss[1])
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(grepl("x", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss <- 1
}
}
}
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(grepl("x", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss <- 1
}
}
}
min(music_cleaned$song.hotttnesss)
music <- read.csv("music.csv", header=T)
music_cleaned <- music[,c(1, 7, 9, 10, 11, 18, 24,26, 28, 29, 30, 32)]
View(music_cleaned)
#1.1 datasets if the terms col has pop, rock, jazz,classic, country
contains_rock <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "rock"))
View(music_cleaned)
Rock_Song_hotness_mean <- mean(contains_rock$song.hotttnesss, na.rm = TRUE)
View(music_cleaned)
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
View(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(grepl("rock", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss <- 1
}
}
}
View(music_cleaned)
music <- read.csv("music.csv", header=T)
music_cleaned <- music[,c(1, 7, 9, 10, 11, 18, 24,26, 28, 29, 30, 32)]
#1.1 datasets if the terms col has pop, rock, jazz,classic, country
contains_rock <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "rock"))
contains_Jazz <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "jazz"))
contains_Pop <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "pop"))
contains_Classic <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "classic"))
contains_Country <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "country"))
Rock_Song_hotness_mean <- mean(contains_rock$song.hotttnesss, na.rm = TRUE)
Jazz_Song_hotness_mean <- mean(contains_Jazz$song.hotttnesss, na.rm = TRUE)
Pop_Song_hotness_mean <- mean(contains_Pop$song.hotttnesss, na.rm = TRUE)
Classic_Song_hotness_mean <- mean(contains_Classic$song.hotttnesss, na.rm = TRUE)
Country_Song_hotness_mean <- mean(contains_Country$song.hotttnesss, na.rm = TRUE)
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(grepl("x", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss <- 1
}
}
}
min(music_cleaned$song.hotttnesss)
grepl("x", music_cleaned$terms[i])
View(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(!grepl("x", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss <- 1
}
}
}
min(music_cleaned$song.hotttnesss)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(!grepl("x", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss <- 2
}
}
}
min(music_cleaned$song.hotttnesss)
music <- read.csv("music.csv", header=T)
music_cleaned <- music[,c(1, 7, 9, 10, 11, 18, 24,26, 28, 29, 30, 32)]
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(!grepl("x", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss <- 2
}
}
}
View(music_cleaned)
library(stringr)
library(cluster)
library(dplyr)
music <- read.csv("music.csv", header=T)
music_cleaned <- music[,c(1, 7, 9, 10, 11, 18, 24,26, 28, 29, 30, 32)]
#1.1 datasets if the terms col has pop, rock, jazz,classic, country
contains_rock <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "rock"))
contains_Jazz <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "jazz"))
contains_Pop <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "pop"))
contains_Classic <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "classic"))
contains_Country <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "country"))
Rock_Song_hotness_mean <- mean(contains_rock$song.hotttnesss, na.rm = TRUE)
Jazz_Song_hotness_mean <- mean(contains_Jazz$song.hotttnesss, na.rm = TRUE)
Pop_Song_hotness_mean <- mean(contains_Pop$song.hotttnesss, na.rm = TRUE)
Classic_Song_hotness_mean <- mean(contains_Classic$song.hotttnesss, na.rm = TRUE)
Country_Song_hotness_mean <- mean(contains_Country$song.hotttnesss, na.rm = TRUE)
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(!grepl("rock", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss[i] <- Rock_Song_hotness_mean
}
}
}
min(music_cleaned$song.hotttnesss)
#if a row wass zero in song hotness remove it (meaningless) note: it does not consider NAs as well
music_cleaned <- subset(music_cleaned,song.hotttnesss!=0)
#making sure there is no NA left in  the dataset
music_cleaned <- music_cleaned[complete.cases(music_cleaned),]
#num of complete case (without NA)
sum(as.numeric(complete.cases(music_cleaned)))
max(music_cleaned$song.hotttnesss)
#removing the nominal value
music_cleaned <- music_cleaned[,-c(11)]
#normalizing with range between -1 and 1
col <- ncol(music_cleaned)
newmin = -1
newmax= 1
str(nrml_music)
nrml_music <- 0
for(j in 1:col)
{
oldmin <- min(music_cleaned[j])
oldmax <- max(music_cleaned[j])
current <- music_cleaned[j]
temp <- ((current-oldmin)/(oldmax-oldmin))*(newmax-newmin) + newmin
temp <- as.data.frame(temp)
nrml_music <- cbind(nrml_music, data.frame(temp))
}
nrml_music <- nrml_music[,-c(1)]
View(nrml_music)
kc <- kmeans(nrml_music,4)
plot(music_cleaned[c("artist.hotttnesss", "song.hotttnesss")], col=kc$cluster)
plot(music_cleaned[c("song.hotttnesss", "tempo")], col=kc$cluster)
music <- read.csv("music.csv", header=T)
music_cleaned <- music[,c(1, 7, 9, 10, 11, 18, 24,26, 28, 29, 30, 32)]
#1.1 datasets if the terms col has pop, rock, jazz,classic, country
contains_rock <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "rock"))
contains_Jazz <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "jazz"))
contains_Pop <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "pop"))
contains_Classic <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "classic"))
contains_Country <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "country"))
Rock_Song_hotness_mean <- mean(contains_rock$song.hotttnesss, na.rm = TRUE)
Jazz_Song_hotness_mean <- mean(contains_Jazz$song.hotttnesss, na.rm = TRUE)
Pop_Song_hotness_mean <- mean(contains_Pop$song.hotttnesss, na.rm = TRUE)
Classic_Song_hotness_mean <- mean(contains_Classic$song.hotttnesss, na.rm = TRUE)
Country_Song_hotness_mean <- mean(contains_Country$song.hotttnesss, na.rm = TRUE)
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(!grepl("rock", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss[i] <- Rock_Song_hotness_mean
}
}
}
min(music_cleaned$song.hotttnesss)
#if a row wass zero in song hotness remove it (meaningless) note: it does not consider NAs as well
music_cleaned <- subset(music_cleaned,song.hotttnesss!=0)
#making sure there is no NA left in  the dataset
music_cleaned <- music_cleaned[complete.cases(music_cleaned),]
#num of complete case (without NA)
sum(as.numeric(complete.cases(music_cleaned)))
max(music_cleaned$song.hotttnesss)
head(music_cleaned)
View(music_cleaned)
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(grepl("rock", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss[i] <- Rock_Song_hotness_mean
}
}
}
library(stringr)
library(cluster)
library(dplyr)
music <- read.csv("music.csv", header=T)
music_cleaned <- music[,c(1, 7, 9, 10, 11, 18, 24,26, 28, 29, 30, 32)]
#1.1 datasets if the terms col has pop, rock, jazz,classic, country
contains_rock <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "rock"))
contains_Jazz <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "jazz"))
contains_Pop <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "pop"))
contains_Classic <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "classic"))
contains_Country <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "country"))
Rock_Song_hotness_mean <- mean(contains_rock$song.hotttnesss, na.rm = TRUE)
Jazz_Song_hotness_mean <- mean(contains_Jazz$song.hotttnesss, na.rm = TRUE)
Pop_Song_hotness_mean <- mean(contains_Pop$song.hotttnesss, na.rm = TRUE)
Classic_Song_hotness_mean <- mean(contains_Classic$song.hotttnesss, na.rm = TRUE)
Country_Song_hotness_mean <- mean(contains_Country$song.hotttnesss, na.rm = TRUE)
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(grepl("rock", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss[i] <- Rock_Song_hotness_mean
}
}
}
min(music_cleaned$song.hotttnesss)
#if a row wass zero in song hotness remove it (meaningless) note: it does not consider NAs as well
music_cleaned <- subset(music_cleaned,song.hotttnesss!=0)
#making sure there is no NA left in  the dataset
music_cleaned <- music_cleaned[complete.cases(music_cleaned),]
#num of complete case (without NA)
sum(as.numeric(complete.cases(music_cleaned)))
max(music_cleaned$song.hotttnesss)
head(music_cleaned)
View(music_cleaned)
#removing the nominal value
music_cleaned <- music_cleaned[,-c(11)]
#normalizing with range between -1 and 1
col <- ncol(music_cleaned)
newmin = -1
newmax= 1
str(nrml_music)
nrml_music <- 0
for(j in 1:col)
{
oldmin <- min(music_cleaned[j])
oldmax <- max(music_cleaned[j])
current <- music_cleaned[j]
temp <- ((current-oldmin)/(oldmax-oldmin))*(newmax-newmin) + newmin
temp <- as.data.frame(temp)
nrml_music <- cbind(nrml_music, data.frame(temp))
}
nrml_music <- nrml_music[,-c(1)]
View(nrml_music)
View(music_cleaned)
#normalizing with range between -1 and 1
col <- ncol(music_cleaned)
newmin = -1
newmax= 1
str(nrml_music)
nrml_music <- 0
for(j in 1:col)
oldmin <- min(music_cleaned[j])
current <- music_cleaned[j]
temp <- ((current-oldmin)/(oldmax-oldmin))*(newmax-newmin) + newmin
temp <- as.data.frame(temp)
nrml_music <- cbind(nrml_music, data.frame(temp))
{
oldmin <- min(music_cleaned[j])
oldmax <- max(music_cleaned[j])
current <- music_cleaned[j]
temp <- ((current-oldmin)/(oldmax-oldmin))*(newmax-newmin) + newmin
temp <- as.data.frame(temp)
nrml_music <- cbind(nrml_music, data.frame(temp))
}
nrml_music <- nrml_music[,-c(1)]
View(nrml_music)
View(temp)
View(nrml_music)
#normalizing with range between -1 and 1
remove(nrml_music)
col <- ncol(music_cleaned)
newmin = -1
newmax= 1
str(nrml_music)
nrml_music <- 0
for(j in 1:col)
{
oldmin <- min(music_cleaned[j])
oldmax <- max(music_cleaned[j])
current <- music_cleaned[j]
temp <- ((current-oldmin)/(oldmax-oldmin))*(newmax-newmin) + newmin
temp <- as.data.frame(temp)
nrml_music <- cbind(nrml_music, data.frame(temp))
}
nrml_music <- nrml_music[,-c(1)]
View(nrml_music)
#normalizing with range between -1 and 1
remove(nrml_music)
#normalizing with range between -1 and 1
min(music_cleaned)
#normalizing with range between -1 and 1
min(music_cleaned$song.hotttnesss)
#normalizing with range between -1 and 1
max(music_cleaned$song.hotttnesss)
remove(nrml_music)
col <- ncol(music_cleaned)
View(music_cleaned)
newmin = -1
newmax= 1
nrml_music <- 0
for(j in 1:col)
current <- music_cleaned[j]
View(current)
for(j in 1:col)
for(j in 1:col){
oldmin <- min(music_cleaned[j])
oldmax <- max(music_cleaned[j])
current <- music_cleaned[j]
temp <- ((current-oldmin)/(oldmax-oldmin))*(newmax-newmin) + newmin
temp <- as.data.frame(temp)
nrml_music <- cbind(nrml_music, data.frame(temp))
}
View(nrml_music)
View(nrml_music)
nrml_music <- nrml_music[,-c(1)]
#standardisation with substraction of mean and division by standard deviation with scale function (as an alternative to normalization)
means = apply(music_cleaned, 2, mean)
sds = apply(music_cleaned, 2, sd)
nrml_music <- scale(music_cleaned, center = means, scale=sds)
nrml_music <- as.data.frame(nrml_music)
kc <- kmeans(nrml_music,4)
plot(music_cleaned[c("artist.hotttnesss", "song.hotttnesss")], col=kc$cluster)
plot(music_cleaned[c("tempo", "song.hotttnesss")], col=kc$cluster)
View(nrml_music)
for(j in 1:col){
oldmin <- min(music_cleaned[j])
oldmax <- max(music_cleaned[j])
current <- music_cleaned[j]
temp <- ((current-oldmin)/(oldmax-oldmin))*(newmax-newmin) + newmin
temp <- as.data.frame(temp)
nrml_music <- cbind(nrml_music, data.frame(temp))
}
library(stringr)
library(cluster)
library(dplyr)
music <- read.csv("music.csv", header=T)
music_cleaned <- music[,c(1, 7, 9, 10, 11, 18, 24,26, 28, 29, 30, 32)]
#1.1 datasets if the terms col has pop, rock, jazz,classic, country
contains_rock <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "rock"))
contains_Jazz <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "jazz"))
contains_Pop <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "pop"))
contains_Classic <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "classic"))
contains_Country <- music_cleaned %>%
filter(str_detect(music_cleaned$terms, "country"))
Rock_Song_hotness_mean <- mean(contains_rock$song.hotttnesss, na.rm = TRUE)
Jazz_Song_hotness_mean <- mean(contains_Jazz$song.hotttnesss, na.rm = TRUE)
Pop_Song_hotness_mean <- mean(contains_Pop$song.hotttnesss, na.rm = TRUE)
Classic_Song_hotness_mean <- mean(contains_Classic$song.hotttnesss, na.rm = TRUE)
Country_Song_hotness_mean <- mean(contains_Country$song.hotttnesss, na.rm = TRUE)
#3.impute the mean to every missing value
length <- nrow(music_cleaned)
for(i in 1:length)
{
if(is.na(music_cleaned$song.hotttnesss[i]))
{
if(grepl("rock", music_cleaned$terms[i]))
{
music_cleaned$song.hotttnesss[i] <- Rock_Song_hotness_mean
}
}
}
min(music_cleaned$song.hotttnesss)
View(music_cleaned)
#making sure there is no NA left in  the dataset
music_cleaned <- music_cleaned[complete.cases(music_cleaned),]
#num of complete case (without NA)
sum(as.numeric(complete.cases(music_cleaned)))
max(music_cleaned$song.hotttnesss)
#removing the nominal value
music_cleaned <- music_cleaned[,-c(11)]
#normalizing with range between -1 and 1
max(music_cleaned$song.hotttnesss)
col <- ncol(music_cleaned)
newmin = -1
newmax= 1
str(nrml_music)
nrml_music <- 0
for(j in 1:col){
oldmin <- min(music_cleaned[j])
oldmax <- max(music_cleaned[j])
current <- music_cleaned[j]
temp <- ((current-oldmin)/(oldmax-oldmin))*(newmax-newmin) + newmin
temp <- as.data.frame(temp)
nrml_music <- cbind(nrml_music, data.frame(temp))
}
nrml_music <- nrml_music[,-c(1)]
View(nrml_music)
kc <- kmeans(nrml_music,4)
plot(music_cleaned[c("artist.hotttnesss", "song.hotttnesss")], col=kc$cluster)
plot(music_cleaned[c("song.hotttnesss", "tempo")], col=kc$cluster)
plot(music_cleaned[c("tempo", "song.hotttnesss")], col=kc$cluster)
